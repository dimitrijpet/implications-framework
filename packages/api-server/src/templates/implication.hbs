{{! packages/api-server/templates/implication.hbs (NEW FILE) }}
// Auto-generated by Implications Framework
// Created: {{timestamp}}

const { assign } = require('xstate');
const BaseBookingImplications = require('../BaseBookingImplications.js');
const ImplicationHelper = require('../../ImplicationsHelper.js');

class {{stateName}}BookingImplications {
  
  static xstateConfig = {
    meta: {
      status: "{{status}}",
      triggerAction: "{{status}}",
      
      requires: {
        previousStatus: "{{previousStatus}}",
        data: {}
      },
      
      setup: {
        testFile: "tests/implications/bookings/status/{{stateName}}Booking-UNIT.spec.js",
        actionName: "{{actionName}}",
        platform: "{{platform}}"
      },
      
      requiredFields: [
        {{#each requiredFields}}
        "{{this}}"{{#unless @last}},{{/unless}}
        {{/each}}
      ],
      
      triggerButton: "{{triggerButton}}",
      {{#if afterButton}}
      afterButton: "{{afterButton}}",
      {{else}}
      afterButton: null,
      {{/if}}
      {{#if previousButton}}
      previousButton: "{{previousButton}}",
      {{else}}
      previousButton: null,
      {{/if}}
      
      notificationKey: "{{notificationKey}}"
    },
    
    on: {
      // TODO: Add transitions
    },
    
    entry: assign({
      status: "{{status}}",
      statusLabel: '{{status}}',
      statusLabelUpperCase: '{{statusUpperCase}}',
      statusCode: '{{status}}',
      statusNumber: '1',
      
      {{camelCase status}}At: ({ event }) => event.{{camelCase status}}At || new Date().toISOString(),
      {{camelCase status}}By: ({ event }) => event.userName || event.managerName
    })
  };
  
  static get statusData() {
    const staticData = {};
    
    for (const [key, value] of Object.entries(this.xstateConfig.entry)) {
      if (typeof value !== 'function') {
        staticData[key] = value;
      }
    }
    
    return {
      ...this.xstateConfig.meta,
      ...staticData
    };
  }
  
  static validateTestData(testData) {
    const missing = [];
    
    for (const field of this.statusData.requiredFields) {
      if (!testData.hasOwnProperty(field)) {
        missing.push(field);
      }
    }
    
    if (missing.length > 0) {
      throw new Error(
        `❌ Invalid testData for {{status}} state. Missing: ${missing.join(', ')}`
      );
    }
    
    console.log('✅ TestData validation passed for {{status}} state');
    return true;
  }
  
  static createTestData(overrides = {}) {
    const moment = require('moment');
    const BookingStatusTestConfig = require('./BookingStatusTest.config.js');
    const config = BookingStatusTestConfig;
    
    return {
      ...this.statusData,
      
      clubName: config.club.name,
      clubTimezone: config.club.timezone,
      
      bookingType: config.booking.bookingType,
      bookingLength: config.booking.bookingLength,
      
      bookingTime: {
        start: moment("17:30", "HH:mm"),
        end: moment("18:00", "HH:mm")
      },
      
      dancerName: config.dancer?.name,
      managerName: config.club.manager.name,
      
      ...overrides
    };
  }
  
  static mirrorsOn = {
    description: "{{status}} booking status updates mirror across screens",
    
    UI: {
      // TODO: Add UI implications for each platform
      // dancer: { ... },
      // clubApp: { ... },
      // web: { ... }
    }
  };
}

module.exports = {{stateName}}BookingImplications;