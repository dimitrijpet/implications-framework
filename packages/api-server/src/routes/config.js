// packages/api-server/src/routes/config.js (NEW FILE)

import express from 'express';
import path from 'path';
import fs from 'fs-extra';

const router = express.Router();

/**
 * GET /api/config/:projectPath
 * Load config from project
 */
router.get('/:projectPath(*)', async (req, res) => {
  try {
    const projectPath = req.params.projectPath;
    const configPath = path.join(projectPath, 'ai-testing.config.js');
    
    console.log('📖 Loading config from:', configPath);
    
    // Check if config exists
    const exists = await fs.pathExists(configPath);
    
    if (!exists) {
      console.log('ℹ️  Config file not found, returning default');
      return res.json({
        exists: false,
        config: getDefaultConfig()
      });
    }
    
    // Read the file content
    const content = await fs.readFile(configPath, 'utf-8');
    
    // Import the config
    const configModule = await import(`file://${configPath}?t=${Date.now()}`);
    const config = configModule.default || configModule;
    
    console.log('✅ Config loaded successfully');
    
    res.json({
      exists: true,
      config: config,
      filePath: configPath
    });
    
  } catch (error) {
    console.error('❌ Error loading config:', error);
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

/**
 * POST /api/config
 * Save config to project
 */
router.post('/', async (req, res) => {
  try {
    const { projectPath, config } = req.body;
    
    if (!projectPath || !config) {
      return res.status(400).json({ 
        error: 'projectPath and config are required' 
      });
    }
    
    const configPath = path.join(projectPath, 'ai-testing.config.js');
    
    console.log('💾 Saving config to:', configPath);
    
    // Create backup if file exists
    const exists = await fs.pathExists(configPath);
    if (exists) {
      const backupPath = `${configPath}.backup.${Date.now()}`;
      await fs.copy(configPath, backupPath);
      console.log('📦 Backup created:', backupPath);
    }
    
    // Generate config file content
    const configContent = generateConfigFile(config);
    
    // Write to file
    await fs.writeFile(configPath, configContent, 'utf-8');
    
    console.log('✅ Config saved successfully');
    
    res.json({
      success: true,
      filePath: configPath,
      backup: exists
    });
    
  } catch (error) {
    console.error('❌ Error saving config:', error);
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

/**
 * Generate config file content from object
 */
function generateConfigFile(config) {
  // Better formatting that preserves structure
  const configStr = JSON.stringify(config, null, 2);
  
  // Only remove quotes from top-level keys, not nested ones
  const lines = configStr.split('\n');
  const formatted = lines.map((line, index) => {
    // Only replace quotes on lines that are direct object properties (2 spaces indent)
    if (line.match(/^  "[^"]+":/)) {
      return line.replace(/^  "([^"]+)":/, '  $1:');
    }
    return line;
  }).join('\n');
  
  return `// Auto-generated by Implications Framework
// Last updated: ${new Date().toISOString()}

module.exports = ${formatted};
`;
}

/**
 * Default configuration
 */
function getDefaultConfig() {
  return {
    projectName: 'My Project',
    projectType: 'generic',
    
    stateRegistry: {
      strategy: 'auto',
      caseSensitive: false,
      statusPrefixes: [
        'Accepted', 'Rejected', 'Pending', 'Standby',
        'Created', 'CheckedIn', 'CheckedOut', 'Completed',
        'Cancelled', 'Missed', 'Invited'
      ],
      pattern: '{Status}BookingImplications',
      mappings: {}
    },
    
    paths: {
      implications: './tests/implications',
      sections: './tests/sections',
      screens: './tests/screens'
    }
  };
}

export default router;